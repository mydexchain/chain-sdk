syntax = "proto3";
package dex.tx.v0;

import "google/api/annotations.proto";
import "dex/base/abci/v0/abci.proto";
import "dex/tx/v0/tx.proto";
import "gogoproto/gogo.proto";
import "dex/base/query/v0/pagination.proto";

option (gogoproto.goproto_registration) = true;
option go_package = "github.com/mydexchain/chain-sdk/types/tx";

// Service defines a gRPC service for interacting with transactions.
service Service {
  // Simulate simulates executing a transaction for estimating gas usage.
  rpc Simulate(SimulateRequest) returns (SimulateResponse) {
    option (google.api.http) = {
      post: "/dex/tx/v0/simulate"
      body: "*"
    };
  }
  // GetTx fetches a tx by hash.
  rpc GetTx(GetTxRequest) returns (GetTxResponse) {
    option (google.api.http).get = "/dex/tx/v0/txs/{hash}";
  }
  // BroadcastTx broadcast transaction.
  rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {
    option (google.api.http) = {
      post: "/dex/tx/v0/txs"
      body: "*"
    };
  }
  // GetTxsEvent fetches txs by event.
  rpc GetTxsEvent(GetTxsEventRequest) returns (GetTxsEventResponse) {
    option (google.api.http).get = "/dex/tx/v0/txs";
  }
}

// GetTxsEventRequest is the request type for the Service.TxsByEvents
// RPC method.
message GetTxsEventRequest {
  // events is the list of transaction event type.
  repeated string events = 1;
  // pagination defines an pagination for the request.
  dex.base.query.v0.PageRequest pagination = 2;
  OrderBy order_by = 3;
}

// OrderBy defines the sorting order
enum OrderBy {
  // ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
  ORDER_BY_UNSPECIFIED = 0;
  // ORDER_BY_ASC defines ascending order
  ORDER_BY_ASC     = 1;
  // ORDER_BY_DESC defines descending order
  ORDER_BY_DESC    = 2;
}

// GetTxsEventResponse is the response type for the Service.TxsByEvents
// RPC method.
message GetTxsEventResponse {
  // txs is the list of queried transactions.
  repeated dex.tx.v0.Tx txs = 1;
  // tx_responses is the list of queried TxResponses.
  repeated dex.base.abci.v0.TxResponse tx_responses = 2;
  // pagination defines an pagination for the response.
  dex.base.query.v0.PageResponse pagination = 3;
}

// BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
// RPC method.
message BroadcastTxRequest {
  // tx_bytes is the raw transaction.
  bytes         tx_bytes = 1;
  BroadcastMode mode     = 2;
}

// BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
enum BroadcastMode {
  // zero-value for mode ordering
  BROADCAST_MODE_UNSPECIFIED = 0;
  // BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
  // the tx to be committed in a block.
  BROADCAST_MODE_BLOCK = 1;
  // BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
  // a CheckTx execution response only.
  BROADCAST_MODE_SYNC = 2;
  // BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
  // immediately.
  BROADCAST_MODE_ASYNC = 3;
}

// BroadcastTxResponse is the response type for the
// Service.BroadcastTx method.
message BroadcastTxResponse {
  // tx_response is the queried TxResponses.
  dex.base.abci.v0.TxResponse tx_response = 1;
}

// SimulateRequest is the request type for the Service.Simulate
// RPC method.
message SimulateRequest {
  // tx is the transaction to simulate.
  dex.tx.v0.Tx tx = 1;
}

// SimulateResponse is the response type for the
// Service.SimulateRPC method.
message SimulateResponse {
  // gas_info is the information about gas used in the simulation.
  dex.base.abci.v0.GasInfo gas_info = 1;
  // result is the result of the simulation.
  dex.base.abci.v0.Result result = 2;
}

// GetTxRequest is the request type for the Service.GetTx
// RPC method.
message GetTxRequest {
  // hash is the tx hash to query, encoded as a hex string.
  string hash = 1;
}

// GetTxResponse is the response type for the Service.GetTx method.
message GetTxResponse {
  // tx is the queried transaction.
  dex.tx.v0.Tx tx = 1;
  // tx_response is the queried TxResponses.
  dex.base.abci.v0.TxResponse tx_response = 2;
}